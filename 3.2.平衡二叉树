#define LH 1
#define EH 0
#define LH -1
#define TRUE 1
#define FALSE 0

typedef struct BiTNode				//二叉树生命
	int data;						//节点值
	int bf;							//平衡因子balance factor
	struct BiTNode *left,*right;	//声明左孩子跟右孩子
}BiTNode,*BiTree;


void R_Rotate(BiTree *p)			//右旋
{
	BiTree L;						//声明一个BiTree变量来储存p的左孩子
	L = (*p)->left;					
	(*p)->left = L->right;			//令p的左孩子L的右孩子等于p的左孩子
	L->right = (*p);				//将p作为其右孩子
	*p = L;							//将L放到根节点位置
}


void L_Rotate(BiTree *p)			//左旋
{
	BiTree R;
	R = (*p)->right;
	(*p)->right = R->left;
	(*p)->right = (*p);
	*p =R;
}


void LeftBalance(BiTree *T)			//左子数过长
{
	BiTree L,Lr;
	L = (*T)->left;					//令L等于T的左孩子
	
	switch(L->bf)					//检查左孩子的平衡因子
	{
		case LH:					//LL型
			(*T)->bf = L->bf = EH;
			R_Rotate(&(*T));
			break;
		case RH:					//LR型
			L_Rotate();				//先左旋
			R_Rotate(T);			//后右旋
			break;
	}
}

void RightBalance(BiTree *T)		//
{
	BiTree R,Rl;
	R = (*T)->right;				//

	switch(R->bf)					//
	{
		case LH:			//RL型
			break;
		case EH:
			break;
		case RH:			//RR型
			break;
	}
}


BiTree InsertAVL(BiTNode *T, int e, int *taller)
{
	if(*T == NULL)
	{
		T = (*BiTree)malloc(sizeof(BiTree));
		T->data = e;
		T->bf = EH;
		T->left = T->right = NULL;
		*taller = TRUE;
	}
	else
	{
		if(e == (*T)->data )
		{
			T->bf = EH; 
			*taller = FALSE;
			return FALSE;
		}
		else if( e < (*T)->data )
		{
			if(!InsertAVL( &(*T)->lchild, e, taller))
			{
				reutrn FALSE;
			}
			if(*taller)
			{
				switch((*T)->data)
				{
					case LH:
						LeftBalance(T);
						*taller = FASLE;
						break;
					case EH:
						*taller = TRUE;
						(*T)->bf = LH;
						break;
					case RH:
						(*T)->bf = EH;
						*taller = FALSE;
						break;				
				}
			}
		}
		else
		{
			if(!InsertAVL( &(*T)->rchild, e, taller))
			{
				reutrn FALSE;
			}
			if(*taller)
			{
				switch((*T)->data)
				{
					case LH:
						(*T)->bf = EH;
						*taller = FASLE;
						break;
					case EH:
						*taller = TRUE;
						(*T)->bf = RH;
						break;
					case RH:
						RightBalance(T);
						*taller = FALSE;
						break;
				}
			}
		}
	}
}
